#!/bin/bash

# Copyright (c) 2020 Teradici Corporation
#
# This source code is licensed under the MIT license found in the
# LICENSE file in the root directory of this source tree.

exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1

LOG_FILE="/var/log/teradici/provisioning.log"
METADATA_IP="http://169.254.169.254"
PCOIP_AGENT_REPO_PUBKEY_URL=${pcoip_agent_repo_pubkey_url}
PCOIP_AGENT_REPO_URL=${pcoip_agent_repo_url}

log() {
    local message="$1"
    echo "[$(date)] $message"
}

get_credentials() {
    # Disable logging of secrets by wrapping the region with set +x and set -x
    set +x
    if [[ -z "${customer_master_key_id}" ]]; then
        log "--> Script is not using encryption for secrets."

        PCOIP_REGISTRATION_CODE="${pcoip_registration_code}"
        AD_SERVICE_ACCOUNT_PASSWORD="${ad_service_account_password}"

    else
        log "--> Script is using encryption key: '${customer_master_key_id}'."

        if [[ "${pcoip_registration_code}" ]]; then
            log "--> Decrypting pcoip_registration_code..."
            PCOIP_REGISTRATION_CODE=$(aws kms decrypt --region ${aws_region} --ciphertext-blob fileb://<(echo "${pcoip_registration_code}" | base64 -d) --output text --query Plaintext | base64 -d)
        fi

        log "--> Decrypting ad_service_account_password..."
        AD_SERVICE_ACCOUNT_PASSWORD=$(aws kms decrypt --region ${aws_region} --ciphertext-blob fileb://<(echo "${ad_service_account_password}" | base64 -d) --output text --query Plaintext | base64 -d)
    fi
    set -x
}

check_required_vars() {
    set +x
    if [[ -z "$AD_SERVICE_ACCOUNT_PASSWORD" ]]; then
        log "--> ERROR: Missing Active Directory Service Account Password."
        missing_vars="true"
    fi
    set -x

    if [[ "$missing_vars" = "true" ]]; then
        log "--> Exiting..."
        exit 1
    fi
}

# Update the hostname to match this instance's "Name" Tag
update_hostname() {
    TOKEN=`curl -X PUT "$METADATA_IP/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 60"`
    ID=`curl $METADATA_IP/latest/meta-data/instance-id -H "X-aws-ec2-metadata-token: $TOKEN"`
    REGION=`curl $METADATA_IP/latest/dynamic/instance-identity/document/ -H "X-aws-ec2-metadata-token: $TOKEN" | jq -r .region`
    NEW_HOSTNAME=`aws ec2 describe-tags --region $REGION --filters "Name=resource-id,Values=$ID" "Name=key,Values=Name" --output json | jq -r .Tags[0].Value`

    sudo hostnamectl set-hostname $NEW_HOSTNAME.${domain_name}
}

exit_and_restart() {
    log "--> Rebooting..."
    (sleep 1; reboot -p) &
    exit
}

install_pcoip_agent() {
    if ! (rpm -q pcoip-agent-standard)
    then
        log "--> Installing PCoIP agent..."
        # Get the Teradici pubkey
        log "--> Getting Teradici pubkey..."
        rpm --import $PCOIP_AGENT_REPO_PUBKEY_URL

        # Get PCoIP repo
        log "--> Getting Teradici PCoIP agent repo..."
        wget --retry-connrefused --tries=3 --waitretry=5 -P /etc/yum.repos.d $PCOIP_AGENT_REPO_URL

        log "--> Installing PCoIP standard agent..."
        yum -y install pcoip-agent-standard
        if [ $? -ne 0 ]; then
            log "--> ERROR: Failed to install PCoIP agent."
            exit 1
        fi
        log "--> PCoIP agent installed successfully."

        set +x
        if [[ "${pcoip_registration_code}" ]]; then
            log "--> Registering PCoIP agent license..."
            n=0
            while true; do
                /usr/sbin/pcoip-register-host --registration-code="$PCOIP_REGISTRATION_CODE" && break
                n=$[$n+1]

                if [ $n -ge 10 ]; then
                    log "--> ERROR: Failed to register PCoIP agent after $n tries."
                    exit 1
                fi

                log "--> ERROR: Failed to register PCoIP agent. Retrying in 10s..."
                sleep 10
            done
            log "--> PCoIP agent registered successfully."

        else
            log "--> No PCoIP Registration Code provided. Skipping PCoIP agent registration..."
        fi
        set -x
    fi
}

# Join domain
join_domain() {
    local dns_record_file="dns_record"
    if [[ ! -f "$dns_record_file" ]]
    then
        log "--> DOMAIN NAME: ${domain_name}"
        log "--> USERNAME: ${ad_service_account_username}"
        log "--> DOMAIN CONTROLLER: ${domain_controller_ip}"

        # default hostname has the form ip-10-0-0-1.us-west-1.compute.internal,
        # get the first part of it
        VM_NAME=$(echo $(hostname) | sed -n 's/\(^[^.]*\).*/\1/p')

        # Wait for AD service account to be set up
        yum -y install openldap-clients
        log "--> Waiting for AD account ${ad_service_account_username}@${domain_name} to be available..."
        set +x
        until ldapwhoami -H ldap://${domain_controller_ip} -D ${ad_service_account_username}@${domain_name} -w "$AD_SERVICE_ACCOUNT_PASSWORD" -o nettimeout=1 > /dev/null 2>&1
        do
            log "--> ${ad_service_account_username}@${domain_name} not available yet, retrying in 10 seconds..."
            sleep 10
        done
        set -x

        # Join domain
        log "--> Installing required packages to join domain..."
        yum -y install sssd realmd oddjob oddjob-mkhomedir adcli samba-common samba-common-tools krb5-workstation openldap-clients policycoreutils-python

        log "--> Joining the domain '${domain_name}'..."
        local retries=10

        set +x
        while true
        do
            echo "$AD_SERVICE_ACCOUNT_PASSWORD" | realm join --user="${ad_service_account_username}@${domain_name}" "${domain_name}" --verbose >&2

            local rc=$?
            if [[ $rc -eq 0 ]]
            then
                log "--> Successfully joined domain '${domain_name}'."
                break
            fi

            if [ $retries -eq 0 ]
            then
                log "--> ERROR: Failed to join domain '${domain_name}'."
                return 106
            fi

            log "--> ERROR: Failed to join domain '${domain_name}'. $retries retries remaining..."
            retries=$((retries-1))
            sleep 60
        done
        set -x

        domainname "$VM_NAME.${domain_name}"
        echo "%${domain_name}\\\\Domain\\ Admins ALL=(ALL) ALL" > /etc/sudoers.d/sudoers

        log "--> Registering with DNS..."
        DOMAIN_UPPER=$(echo "${domain_name}" | tr '[:lower:]' '[:upper:]')
        IP_ADDRESS=$(hostname -I | grep -Eo '10.([0-9]*\.){2}[0-9]*')
        set +x
        echo "$AD_SERVICE_ACCOUNT_PASSWORD" | kinit "${ad_service_account_username}"@"$DOMAIN_UPPER"
        set -x
        touch "$dns_record_file"
        echo "server ${domain_controller_ip}" > "$dns_record_file"
        echo "update add $VM_NAME.${domain_name} 600 a $IP_ADDRESS" >> "$dns_record_file"
        echo "send" >> "$dns_record_file"
        nsupdate -g "$dns_record_file" > /var/sky

        log "--> Configuring settings..."
        sed -i '$ a\dyndns_update = True\ndyndns_ttl = 3600\ndyndns_refresh_interval = 43200\ndyndns_update_ptr = True\nldap_user_principal = nosuchattribute' /etc/sssd/sssd.conf
        sed -c -i "s/\\(use_fully_qualified_names *= *\\).*/\\1False/" /etc/sssd/sssd.conf
        sed -c -i "s/\\(fallback_homedir *= *\\).*/\\1\\/home\\/%u/" /etc/sssd/sssd.conf

        # sssd.conf configuration is required first before enabling sssd
        log "--> Restarting messagebus service..."
        if ! (systemctl restart messagebus)
        then
            log "--> ERROR: Failed to restart messagebus service."
            return 106
        fi

        log "--> Enabling and starting sssd service..."
        if ! (systemctl enable sssd --now)
        then
            log "--> ERROR: Failed to start sssd service."
            return 106
        fi
    fi
}

# Open up firewall for PCoIP Agent. By default eth0 is in firewall zone "public"
update_firewall() {
    log "--> Adding 'pcoip-agent' service to public firewall zone..."
    firewall-offline-cmd --zone=public --add-service=pcoip-agent
    systemctl enable firewalld
    systemctl start firewalld
}

if (rpm -q pcoip-agent-standard); then
    exit
fi

if [[ ! -f "$LOG_FILE" ]]
then
    mkdir -p "$(dirname $LOG_FILE)"
    touch "$LOG_FILE"
    chmod +644 "$LOG_FILE"
fi

log "$(date)"

# Print all executed commands to the terminal
set -x

# Redirect stdout and stderr to the log file
exec &>>$LOG_FILE

# EPEL needed for GraphicsMagick-c++, required by PCoIP Agent
yum -y install epel-release
yum -y update
yum install -y wget awscli jq

get_credentials

check_required_vars

update_hostname

# Install GNOME and set it as the desktop
log "--> Installing Linux GUI..."
yum -y groupinstall "GNOME Desktop" "Graphical Administration Tools"
# yum -y groupinstall "Server with GUI"

log "--> Setting default to graphical target..."
systemctl set-default graphical.target

join_domain

install_pcoip_agent

update_firewall

log "--> Installation is complete!"

exit_and_restart
